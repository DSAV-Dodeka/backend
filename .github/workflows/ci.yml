name: CI

on:
  push:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      # The place the configuration repo will be placed at temporarily
      CONF_REPO_PATH: 'config_source'
      # The location of the useful configuration in the configuration repo
      IN_REPO_CONF_PATH: 'use/backend'
      # The location the configuration will be moved to in the current repo
      CONF_TARGET: 'build_conf/autosourced_config'
    steps:
    - uses: actions/checkout@v2
    # Check out the main deployment repository that contains all config files
    - uses: actions/checkout@v2
      with:
        repository: 'DSAV-Dodeka/dodeka'
        token: ${{ secrets.GH_DODEKACOMCOM_TOKEN }}
        # Relative to ${{ github.workspace }}
        path: ${{ env.CONF_REPO_PATH }}
    # Old configuration is first removed, then the new configuration is moved in its place
    # Then the build_conf script is run, which copies it into dodekaserver/resources
    # It is placed in that location so it is bundled with the package and can be accessed
    # no matter what path you run from.
    - name: Move conf
      run: |
        rm -rf ${{ github.workspace }}/${{ env.CONF_TARGET }}
        mv ${{ github.workspace }}/${{ env.CONF_REPO_PATH }}/${{ env.IN_REPO_CONF_PATH }} ${{ github.workspace }}/${{ env.CONF_TARGET }}
        cd build_conf
        ./build_conf.sh
    # If configuration changes occurred (file-pattern indicates the places to look for changes)
    # a new commit will be auto-created
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Autosource config (automated)
        file_pattern: ${{ env.CONF_TARGET }}/ src/dodekaserver/resources/conf/
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    # Cache means install is saved in repo cache
    # Increment poetry-0 if new install is necessary
    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-0
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        # .venv is created in project
        virtualenvs-in-project: true
        installer-parallel: true
    # Load .venv directly from cache
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        # Key only changes if poetry.lock changes
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: ${{ github.workspace }}/package-lock.json
    - name: Build credentials
      run: |
        npm install
        npm run build
      working-directory: ${{ github.workspace }}/authpage
    - name: Pytest
      run: poetry run pytest tests/app_test.py
